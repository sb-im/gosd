image: golang:1.19-buster

stages:
  - build
  - test
  - broker
  - simulation
  - artifact
    #  - release
    #  - publish
    #  - deploy

.gobuild:
  stage: build
  before_script:
    - go version
  script:
    - make build

go1.18 build:
  image: golang:1.18-buster
  extends: .gobuild

go1.19 build:
  image: golang:1.19-buster
  extends: .gobuild


test database:
  stage: test
  services:
    - postgres:13
    - redis:latest
  variables:
    POSTGRES_DB: gosd
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    DATABASE_URL: "postgres://postgres:password@postgres/gosd?sslmode=disable"
    REDIS_URL: "redis://redis:6379/1"
  before_script:
    - go version
  script:
    - make test

test luavm:
  stage: test
  services:
    - postgres:13
    - redis:6-alpine
  variables:
    POSTGRES_DB: gosd
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    DATABASE_URL: "postgres://postgres:password@postgres/gosd?sslmode=disable"
    REDIS_URL: "redis://redis:6379/5"
  before_script:
    - go version
  script:
    - go run main.go database migrate
    - go run main.go database seed
    - make test-luavm

.test-broker:
  script:
    - apt-get update -y && apt-get install -y mosquitto-clients redis-server
    - make test-broker

# Must Mosquitto >= 1.6
# https://github.com/eclipse/mosquitto/blob/master/ChangeLog.txt#L616
test mosquitto 1.6:
  stage: broker
  services:
    - redis:latest
    - name: eclipse-mosquitto:1.6
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://eclipse-mosquitto:1883"
  extends: .test-broker

# Must Mosquitto >= 2.0.8
# https://github.com/eclipse/mosquitto/issues/2040
test mosquitto 2.0:
  stage: broker
  services:
    - redis:latest
    - name: eclipse-mosquitto:2.0.8
      command:
        - "mosquitto"
        - "-c"
        - "/mosquitto-no-auth.conf"
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://eclipse-mosquitto:1883"
  extends: .test-broker

test emqx 4.4:
  stage: broker
  services:
    - redis:latest
    - name: emqx:4.4
      alias: emqx
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://emqx:1883"
  extends: .test-broker

test-simulation:
  stage: simulation
  services:
    - eclipse-mosquitto:1.6
    - postgres:13
    - redis:latest
  variables:
    MQTT_URL: "mqtt://eclipse-mosquitto:1883"
    POSTGRES_DB: gosd
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    DATABASE_URL: "postgres://postgres:password@postgres/gosd?sslmode=disable"
    REDIS_URL: "redis://redis:6379"
  before_script:
    # - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/sbim/superdock/cloud/ncp.git".insteadOf git@gitlab.com:sbim/superdock/cloud/ncp.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/sbim/superdock/cloud/ncp.git
    - cd ncp
    - make
    - make install
    - cd ..
  script:
    - make
    - ./gosd database migrate
    - ./gosd database seed
    - make test-simulation

build-binary:
  stage: artifact
  script:
    - make
  artifacts:
    paths:
      - gosd
    expire_in: 1 week

build image:
  image: docker:20.10.5
  stage: artifact
  services:
    - docker:20.10.5-dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build --tag $CONTAINER_CANARY_IMAGE .
    - docker push $CONTAINER_CANARY_IMAGE

build image:
  stage: artifact
  image: quay.io/buildah/stable
  variables:
    # Use vfs with buildah. Docker offers overlayfs as a default, but buildah
    # cannot stack overlayfs on top of another overlayfs filesystem.
    STORAGE_DRIVER: vfs
    # You may need this workaround for some errors: https://stackoverflow.com/a/70438141/1233435
    BUILDAH_ISOLATION: chroot
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}/canary:${CI_COMMIT_SHORT_SHA}"
  before_script:
    # Log in to the GitLab container registry
    - export REGISTRY_AUTH_FILE=${HOME}/auth.json
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah images
    - buildah build --tag $IMAGE_NAME
    - buildah images
    - buildah push $IMAGE_NAME

      #image branch:
      #  image: docker:20.10.5
      #  stage: release
      #  services:
      #    - docker:20.10.5-dind
      #  before_script:
      #    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
      #  variables:
      #    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_NAME}:latest
      #  script:
      #    - docker pull $CONTAINER_CANARY_IMAGE
      #    - docker tag $CONTAINER_CANARY_IMAGE $CONTAINER_IMAGE
      #    - docker push $CONTAINER_IMAGE
      #
      #image latest:
      #  image: docker:20.10.5
      #  stage: release
      #  services:
      #    - docker:20.10.5-dind
      #  before_script:
      #    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
      #  variables:
      #    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}/image:latest
      #  script:
      #    - docker pull $CONTAINER_CANARY_IMAGE
      #    - docker tag $CONTAINER_CANARY_IMAGE $CONTAINER_IMAGE
      #    - docker push $CONTAINER_IMAGE
      #  only:
      #    - master
      #
      #image release:
      #  image: docker:20.10.5
      #  stage: release
      #  services:
      #    - docker:20.10.5-dind
      #  before_script:
      #    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
      #  variables:
      #    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_TAG}:latest
      #  script:
      #    - docker pull $CONTAINER_CANARY_IMAGE
      #    - docker tag $CONTAINER_CANARY_IMAGE $CONTAINER_IMAGE
      #    - docker push $CONTAINER_IMAGE
      #  only:
      #     - tags
      #
      #publish ghcr:
      #  image: docker:20.10.5
      #  stage: publish
      #  services:
      #    - docker:20.10.5-dind
      #  before_script:
      #    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
      #    - docker login -u ${GHCR_REGISTRY_USER} -p ${GHCR_REGISTRY_PASSWORD} ghcr.io
      #  variables:
      #    CONTAINER_RELEASE_IMAGE: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_TAG}:latest
      #  script:
      #    - docker pull $CONTAINER_RELEASE_IMAGE
      #    # hash
      #    - docker tag  $CONTAINER_RELEASE_IMAGE ghcr.io/sb-im/developer/gosd:${CI_COMMIT_SHORT_SHA}
      #    - docker push ghcr.io/sb-im/developer/gosd:${CI_COMMIT_SHORT_SHA}
      #    # version lstrip('v')
      #    - docker tag  $CONTAINER_RELEASE_IMAGE ghcr.io/sb-im/developer/gosd:${CI_COMMIT_TAG#v}
      #    - docker push ghcr.io/sb-im/developer/gosd:${CI_COMMIT_TAG#v}
      #    # latest
      #    - docker tag  $CONTAINER_RELEASE_IMAGE ghcr.io/sb-im/developer/gosd:latest
      #    - docker push ghcr.io/sb-im/developer/gosd:latest
      #  only:
      #     - tags
      #
      #publish customregistry:
      #  image: docker:20.10.5
      #  stage: publish
      #  services:
      #    - docker:20.10.5-dind
      #  before_script:
      #    - docker login -u $CI_CUSTOMREGISTRY_USER -p $CI_CUSTOMREGISTRY_PASS $CI_CUSTOMREGISTRY_IMAGEBASE
      #  variables:
      #    CONTAINER_REGISTRY_IMAGE: $CI_CUSTOMREGISTRY_IMAGEBASE/sbim/gosd
      #  script:
      #    - docker pull $CONTAINER_RELEASE_IMAGE:latest || true
      #    - docker build --cache-from $CONTAINER_REGISTRY_IMAGE:latest --tag $CONTAINER_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --tag $CONTAINER_REGISTRY_IMAGE:latest .
      #    - docker push $CONTAINER_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      #    - docker push $CONTAINER_REGISTRY_IMAGE:latest
      #
      #deploy develop:
      #  stage: deploy
      #  only:
      #    refs:
      #      - v3
      #  before_script:
      #    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
      #    - eval "$(ssh-agent -s)"
      #    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
      #    - mkdir -p ~/.ssh
      #    - chmod 700 ~/.ssh
      #    - ssh-keyscan ${HOST_CLOUD_DEVELOP} > ~/.ssh/known_hosts
      #  script:
      #    - go install github.com/swaggo/swag/cmd/swag@latest
      #    - make swagger
      #    - tar -czf - -C swag swagger.json | ssh ${USER_CLOUD_DEVELOP}@${HOST_CLOUD_DEVELOP} "tar -xzf - && sed -i s/localhost:8000/${HOST_CLOUD_DEVELOP}/g swagger.json"
      #    - ssh ${USER_CLOUD_DEVELOP}@${HOST_CLOUD_DEVELOP} 'docker-compose pull -q gosd && docker-compose up -d'

