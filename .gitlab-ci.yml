image: golang:1.13.1-buster

stages:
  - build
  - test
  - broker
  - simulation
  - artifact
  - release
  - deploy

.gobuild:
  stage: build
  before_script:
    - go version
  script:
    - make build

go1.12:build:
  image: golang:1.12-buster
  extends: .gobuild

go1.13:build:
  image: golang:1.13-buster
  extends: .gobuild

go1.14:build:
  image: golang:1.14-buster
  extends: .gobuild

go1.15:build:
  image: golang:1.15-buster
  extends: .gobuild

go1.16:build:
  image: golang:1.16-buster
  extends: .gobuild

test database:
  stage: test
  services:
    - postgres:13
    - redis:latest
  variables:
    POSTGRES_DB: gosd
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    DATABASE_URL: "postgres://postgres:password@postgres/gosd?sslmode=disable"
    REDIS_URL: "redis://redis:6379/1"
  before_script:
    - go version
  script:
    - make
    - ./gosd database migrate
    - make cover

.test-broker:
  script:
    - apt-get update -y && apt-get install -y mosquitto-clients redis-server
    - make test-broker

# Must Mosquitto >= 1.6
# https://github.com/eclipse/mosquitto/blob/master/ChangeLog.txt#L616
test mosquitto 1.6:
  stage: broker
  services:
    - redis:latest
    - name: eclipse-mosquitto:1.6
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://eclipse-mosquitto:1883"
  extends: .test-broker

# Must Mosquitto >= 2.0.8
# https://github.com/eclipse/mosquitto/issues/2040
test mosquitto 2.0:
  stage: broker
  services:
    - redis:latest
    - name: eclipse-mosquitto:2.0.8
      command:
        - "mosquitto"
        - "-c"
        - "/mosquitto-no-auth.conf"
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://eclipse-mosquitto:1883"
  extends: .test-broker

test emqx latest:
  stage: broker
  services:
    - redis:latest
    - name: emqx/emqx:latest
      alias: emqx
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://emqx:1883"
  extends: .test-broker

test emqx 4.2.6:
  stage: broker
  services:
    - redis:latest
    - name: emqx/emqx:4.2.6
      alias: emqx
  variables:
    REDIS_URL: "redis://redis:6379"
    MQTT_URL: "mqtt://emqx:1883"
  extends: .test-broker

test emqx deb:
  stage: broker
  services:
    - redis:latest
  variables:
    REDIS_URL: "redis://redis:6379"
  before_script:
    - apt-get update -y && apt-get install -y mosquitto-clients
    - wget https://github.com/emqx/emqx/releases/download/v4.2.3/emqx-debian10-4.2.3-x86_64.deb
    - dpkg -i emqx-debian10-4.2.3-x86_64.deb
    - service emqx start
  extends: .test-broker

test-simulation:
  stage: simulation
  services:
    - eclipse-mosquitto:1.6
    - postgres:13
    - redis:latest
  variables:
    MQTT_URL: "mqtt://eclipse-mosquitto:1883"
    POSTGRES_DB: gosd
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    DATABASE_URL: "postgres://postgres:password@postgres/gosd?sslmode=disable"
    REDIS_URL: "redis://redis:6379"
  before_script:
    # - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/sbim/superdock/cloud/ncp.git".insteadOf git@gitlab.com:sbim/superdock/cloud/ncp.git
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/sbim/superdock/cloud/ncp.git
    - cd ncp
    - make
    - make install
    - cd ..
  script:
    - make
    - ./gosd database migrate
    - make test-simulation

build-binary:
  stage: artifact
  script:
    - make
  artifacts:
    paths:
      - gosd
    expire_in: 1 week

variables:
  CONTAINER_CANARY_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  CONTAINER_BRANCH_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_STABLE_IMAGE: $CI_REGISTRY_IMAGE:latest
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG

build-docker:
  image: docker:20.10.5
  stage: artifact
  services:
    - docker:20.10.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CONTAINER_STABLE_IMAGE --tag $CONTAINER_BRANCH_IMAGE --tag $CONTAINER_CANARY_IMAGE .
    - docker push $CONTAINER_BRANCH_IMAGE
    - docker push $CONTAINER_CANARY_IMAGE

master-image:
  image: docker:20.10.5
  stage: release
  services:
    - docker:20.10.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_CANARY_IMAGE
    - docker tag $CONTAINER_CANARY_IMAGE $CONTAINER_STABLE_IMAGE
    - docker push $CONTAINER_STABLE_IMAGE
  only:
    - master

release-image:
  image: docker:20.10.5
  stage: release
  services:
    - docker:20.10.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CONTAINER_CANARY_IMAGE
    - docker tag $CONTAINER_CANARY_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
     - tags

deploy:develop:
  stage: deploy
  only:
    refs:
      - dev
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${HOST_CLOUD_DEVELOP} > ~/.ssh/known_hosts
  script:
    - ssh ${USER_CLOUD_DEVELOP}@${HOST_CLOUD_DEVELOP} 'cd deployment && docker-compose pull && bin/sdup-develop-sitl'

